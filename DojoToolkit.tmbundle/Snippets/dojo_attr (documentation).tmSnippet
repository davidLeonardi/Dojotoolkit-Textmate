<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>.attr(${1:node}, ${2:name}, ${3:value});

//	summary:
//		Gets or sets an attribute on an HTML element.
//	description:
//		Handles normalized getting and setting of attributes on DOM
//		Nodes. If 2 arguments are passed, and a the second argumnt is a
//		string, acts as a getter.
//
//		If a third argument is passed, or if the second argument is a
//		map of attributes, acts as a setter.
//
//		When passing functions as values, note that they will not be
//		directly assigned to slots on the node, but rather the default
//		behavior will be removed and the new behavior will be added
//		using `dojo.connect()`, meaning that event handler properties
//		will be normalized and that some caveats with regards to
//		non-standard behaviors for onsubmit apply. Namely that you
//		should cancel form submission using `dojo.stopEvent()` on the
//		passed event object instead of returning a boolean value from
//		the handler itself.
//	node:
//		id or reference to the element to get or set the attribute on
//	name:
//		the name of the attribute to get or set.
//	value:
//		The value to set for the attribute
//	returns:
//		when used as a getter, the value of the requested attribute
//		or null if that attribute does not have a specified or
//		default value;
//
//		when used as a setter, the DOM node
//
//	example:
//	|	// get the current value of the "foo" attribute on a node
//	|	dojo.attr(dojo.byId("nodeId"), "foo");
//	|	// or we can just pass the id:
//	|	dojo.attr("nodeId", "foo");
//
//	example:
//	|	// use attr() to set the tab index
//	|	dojo.attr("nodeId", "tabIndex", 3);
//	|
//
//	example:
//	Set multiple values at once, including event handlers:
//	|	dojo.attr("formId", {
//	|		"foo": "bar",
//	|		"tabIndex": -1,
//	|		"method": "POST",
//	|		"onsubmit": function(e){
//	|			// stop submitting the form. Note that the IE behavior
//	|			// of returning true or false will have no effect here
//	|			// since our handler is connect()ed to the built-in
//	|			// onsubmit behavior and so we need to use
//	|			// dojo.stopEvent() to ensure that the submission
//	|			// doesn't proceed.
//	|			dojo.stopEvent(e);
//	|
//	|			// submit the form with Ajax
//	|			dojo.xhrPost({ form: "formId" });
//	|		}
//	|	});
//
//	example:
//	Style is s special case: Only set with an object hash of styles
//	|	dojo.attr("someNode",{
//	|		id:"bar",
//	|		style:{
//	|			width:"200px", height:"100px", color:"#000"
//	|		}
//	|	});
//
//	example:
//	Again, only set style as an object hash of styles:
//	|	var obj = { color:"#fff", backgroundColor:"#000" };
//	|	dojo.attr("someNode", "style", obj);
//	|
//	|	// though shorter to use `dojo.style()` in this case:
//	|	dojo.style("someNode", obj);

$0</string>
	<key>name</key>
	<string>dojo.attr (documentation)</string>
	<key>tabTrigger</key>
	<string>.attrdoc</string>
	<key>uuid</key>
	<string>B86D77F9-BCC8-4062-81AA-68686F9C7FA2</string>
</dict>
</plist>
